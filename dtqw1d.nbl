 -- core.nbl 
 using io 
 using std 
 using math 
 using time 
 def stdv( OUTPUT_FILE, psi, x, x2, ANIMATION, t,OFFSET ) 
  
     prob = vec_conj( psi ) 
     prob = vec_add_off( prob, OFFSET ) 
      
     if ANIMATION == 1 
         f = open( "NEBLINA_TEMP_PROB" + tostr(t, 5) + ".dat", "w" ) 
 	    print( f, prob )     
     end
  
    vX = vec_prod( x, prob ) 
    vXX = vec_prod( x2, prob ) 
    sX = vec_sum( vX ) 
    sXX = vec_sum( vXX ) 
    varX = sXX - sX*sX 

    println( OUTPUT_FILE, t  + "     " + sX + "     " + varX + "     "+ sqrt( varX ) + "     "+sXX) 
      
 end 
  
 def main() 
   fmtdouble( 16 ) 



   STEPS = toint( args[2] )
   STATESIZE = toint( args[3] )
   GRAPHSIZE= toint( args[4] )
   DISTANCE_VECTOR_SIZE = toint( args[5] )
   SAVE_STATES_MULTIPLE_OF_N=toint( args[6] )
   ANIMATION = toint( args[7] )
   OFFSET=toint( args[8] )

    file_CtI = open( "HIPERWALK_TEMP_COIN_TENSOR_IDENTITY_OPERATOR_2D.dat", "r" ) 
    CtI = sparse complex[STATESIZE,STATESIZE] 
    read( file_CtI, CtI ) 
    file_S = open( "HIPERWALK_TEMP_SHIFT_OPERATOR_2D.dat", "r" ) 
    S = sparse complex[STATESIZE,STATESIZE] 
    read( file_S, S ) 
    file_psi = open( "HIPERWALK_TEMP_PSI.dat", "r" ) 
    PSI = complex[STATESIZE] 
    read( file_psi, PSI ) 
     
    file_X = open("HIPERWALK_TEMP_RANGE_1D.dat", "r" )
    X = float[DISTANCE_VECTOR_SIZE] 
    read( file_X, X ) 

    X2 = vec_prod( X, X ) 
     
    stdv_file = open("statistics.dat", "w" )  
    println( stdv_file, "#STEP              Mean(x)                   Mean(y)                        Var(x)                           Var(y)  Standard deviation     SecMomX SecMomY" ) 
    
    println("Teste")    

    stdv( stdv_file, PSI, X, X2, ANIMATION, 0 ,OFFSET) 

    for t = 1 : STEPS 
            PSI = mat_mulvec( CtI, PSI ) 
            PSI = mat_mulvec( S, PSI ) 
            if SAVE_STATES_MULTIPLE_OF_N > 0  
                a=t % SAVE_STATES_MULTIPLE_OF_N  
                if a == 0  
                    f = open( "wavefunction-" + tostr(t) + ".dat", "w" ) 
                    print( f, PSI ) 
                  stdv( stdv_file, PSI, X, X2, ANIMATION, t,OFFSET) 
                end 
	    else
                stdv( stdv_file, PSI, X, X2, ANIMATION, t,OFFSET) 
            end 
    end   
    PROBABILITY_VECTOR = vec_conj( PSI ) 
    final_prob = vec_add_off( PROBABILITY_VECTOR , OFFSET ) 
    println( "[Neblina] Statistics file: .............. statistics.dat" ) 
    final_state_neblina = open("NEBLINA_TEMP_final_state.dat", "w") 
    println( final_state_neblina, PSI ) 
    final_distribution_neblina = open("NEBLINA_TEMP_final_distribution.dat", "w") 
    println( final_distribution_neblina, final_prob ) 
    println( "[Neblina] Wave Function final : .............. final_state.dat" ) 
    println("[Neblina] Done!") 
 end 
