using math
using io

def print_sta_head( outFile, lenDis )
    print( outFile, "#t  ")
    for i = 1 : lenDis 
        print( outFile, "mean"+ i + "        2nd mom"+ i +"        var"+ i +"        stvdev"+ i + "        ")    
    end
    println( outFile, "")
end

def stdv( outFile, psi, lstDis, lstDis2, anime, t )
    lstDisSize = len(lstDis)
    ssize = len( psi )
    dsize = len( get( lstDis, 1 ) )
    
    prob = vec_conj( psi ) 
    
    if( dsize != ssize )
        prob = vec_add_off( prob, dsize )
    end
    
    if anime == 1 
      f = open( "prob" + tostr(t, 5) + ".dat", "w" ) 
      print( f, vec_conj( psi )  )     
      close( f )
    end
    
    for i = 1 : lstDisSize 
        vMean = vec_prod( get(lstDis,i),  prob ) 
        vMom  = vec_prod( get(lstDis2,i), prob ) 
        mean = vec_sum( vMean ) 
        mom  = vec_sum( vMom  ) 
        var = mom - mean*mean 
        print( outFile,  mean + "     " + mom + "     " + var + "     " + sqrt( var ) + "      " )
    end
    println( outFile, "" )
    
end


def main()
    fmtdouble( 16 )
    T = toint( args[2] )
    mod = toint( args[3] ) -- SAVE_STATES_MULTIPLE_OF_N
    modprobs = toint( args[4] ) -- SAVE_PROBS_MULTIPLE_OF_N
    anime = toint( args[5] )
    ssize = toint( args[6] )
    dsize = toint( args[7] )
    nOps = toint( args[8] )
    nDis = toint( args[9] )


    lstOps = list()
    --println( args )
    fPsi = open(args[10], "r" )
    psi = complex[ssize] 
    read( fPsi , psi )
    for i = 1 : nOps
        fOp = open( args[i+10], "r" )
        lstOps = append( lstOps, sparse complex[ssize, ssize] )
        read( fOp, get(lstOps, i) )
    end

    stdv_file=open("statistics.dat","w")
    lstDis = list()
    lstDis2 = list()  
    if dsize != 0
  
        for i = 1 : nDis
            fDis = open( args[i+10+nOps], "r" )
            lstDis = append( lstDis, float[dsize] )
            read( fDis, get(lstDis, i) )
            lstDis2 = append( lstDis2, vec_prod(  get(lstDis, i),get(lstDis, i)) )
        end
        stdv_file = open("statistics.dat", "w" )  
        print_sta_head( stdv_file, nDis )
    end

    for t = 1 : T
        for i = 1 : nOps
            psi = mat_mulvec( get(lstOps, i), psi )
        end    
        if t % mod == 0
            if dsize != 0
               stdv( stdv_file, psi, lstDis, lstDis2, anime, t )
            end
            f = open( "wavefunction-" + tostr(t) + ".dat", "w" )
            print( f, psi )
            close( f )
        end
        
        if modprobs != 0 and ((t % modprobs) == 0)
            prob = vec_conj( psi )
            f = open( "probdistribution-" + tostr(t) + ".dat", "w" )
            print( f, prob )
            close( f )
        end
    end

    final_state_neblina = open("final_state.dat", "w") 
    println( final_state_neblina, psi ) 
    final_distribution_neblina = open("final_distribution.dat", "w") 
    prob = vec_conj( psi )
    if dsize != 0
        if( dsize != ssize )
            prob = vec_add_off( prob, dsize ) 
        end 
    end    
    println( final_distribution_neblina, prob  ) 
    if dsize != 0
        println( "[Neblina] Statistics file: .............. statistics.dat" ) 
    end    
    println( "[Neblina] Wave Function final : .............. NEBLINA_final_distribution.dat" ) 
    println("[Neblina] Done!")
end
